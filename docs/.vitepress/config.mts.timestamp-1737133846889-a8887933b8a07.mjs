// docs/.vitepress/config.mts
import { defineConfig } from "file:///J:/Projects/my-cs-blog/node_modules/vitepress/dist/node/index.js";

// docs/data.mts
var cates = [
  {
    text: "\u5927\u524D\u7AEF",
    name: "frontend",
    children: [
      {
        text: "JavaScript \u5B9E\u7528\u6280\u5DE7",
        name: "pratical-javascript-tips"
      },
      {
        text: "VSCode \u6E90\u7801\u5206\u6790",
        name: "vscode-source-analysis"
      },
      {
        text: "\u524D\u7AEF\u6740\u866B\u8BB0",
        name: "frontend-debug-dairy"
      }
    ]
  },
  {
    text: "\u5927\u540E\u7AEF",
    name: "backend"
  },
  {
    text: "\u4EBA\u5DE5\u667A\u80FD",
    name: "ai"
  },
  {
    text: "\u8BA1\u7B97\u673A\u79D1\u5B66",
    name: "cs"
  },
  {
    text: "\u4EA7\u54C1&\u8BBE\u8BA1",
    name: "product-and-design"
  },
  {
    text: "\u8BA1\u7B97\u673A\u6280\u672F",
    name: "ct"
  }
];

// docs/.vitepress/config.mts
import { globSync } from "file:///J:/Projects/my-cs-blog/node_modules/tinyglobby/dist/index.mjs";
createSidebar();
var config_default = defineConfig({
  title: "\u300C\u5934\u54E5\u300D\u7684\u6280\u672F\u535A\u5BA2",
  description: "Neo's computer science blog.",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: "Home", link: "/" },
      { text: "Examples", link: "/markdown-examples" }
    ],
    sidebar: catesToSidebarItem(cates),
    socialLinks: [
      { icon: "github", link: "https://github.com/vuejs/vitepress" }
    ]
  }
});
function catesToSidebarItem(cates2) {
  return cates2.map((cate) => {
    return {
      text: cate.text,
      link: `/${cate.name}`,
      items: cate.children && catesToSidebarItem(cate.children)
    };
  });
}
function createSidebar() {
  const files = globSync(["../posts/*.md"]);
  console.log("files", files);
}
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZG9jcy8udml0ZXByZXNzL2NvbmZpZy5tdHMiLCAiZG9jcy9kYXRhLm10cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIko6XFxcXFByb2plY3RzXFxcXG15LWNzLWJsb2dcXFxcZG9jc1xcXFwudml0ZXByZXNzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJKOlxcXFxQcm9qZWN0c1xcXFxteS1jcy1ibG9nXFxcXGRvY3NcXFxcLnZpdGVwcmVzc1xcXFxjb25maWcubXRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9KOi9Qcm9qZWN0cy9teS1jcy1ibG9nL2RvY3MvLnZpdGVwcmVzcy9jb25maWcubXRzXCI7aW1wb3J0IHsgQ29udGVudERhdGEsIGNyZWF0ZUNvbnRlbnRMb2FkZXIsIGRlZmluZUNvbmZpZywgRGVmYXVsdFRoZW1lIH0gZnJvbSAndml0ZXByZXNzJztcbmltcG9ydCB7IENhdGVJdGVtLCBjYXRlcyB9IGZyb20gJy4uL2RhdGEubWpzJztcbmltcG9ydCBtYXR0ZXIgZnJvbSAnZ3JheS1tYXR0ZXInO1xuaW1wb3J0IHsgZ2xvYiwgZ2xvYlN5bmMgfSBmcm9tICd0aW55Z2xvYmJ5JztcblxuY3JlYXRlU2lkZWJhcigpO1xuXG4vLyBodHRwczovL3ZpdGVwcmVzcy5kZXYvcmVmZXJlbmNlL3NpdGUtY29uZmlnXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICB0aXRsZTogXCJcdTMwMENcdTU5MzRcdTU0RTVcdTMwMERcdTc2ODRcdTYyODBcdTY3MkZcdTUzNUFcdTVCQTJcIixcbiAgZGVzY3JpcHRpb246IFwiTmVvJ3MgY29tcHV0ZXIgc2NpZW5jZSBibG9nLlwiLFxuICB0aGVtZUNvbmZpZzoge1xuICAgIC8vIGh0dHBzOi8vdml0ZXByZXNzLmRldi9yZWZlcmVuY2UvZGVmYXVsdC10aGVtZS1jb25maWdcbiAgICBuYXY6IFtcbiAgICAgIHsgdGV4dDogJ0hvbWUnLCBsaW5rOiAnLycgfSxcbiAgICAgIHsgdGV4dDogJ0V4YW1wbGVzJywgbGluazogJy9tYXJrZG93bi1leGFtcGxlcycgfVxuICAgIF0sXG5cbiAgICBzaWRlYmFyOiBjYXRlc1RvU2lkZWJhckl0ZW0oY2F0ZXMpLFxuXG4gICAgc29jaWFsTGlua3M6IFtcbiAgICAgIHsgaWNvbjogJ2dpdGh1YicsIGxpbms6ICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdml0ZXByZXNzJyB9XG4gICAgXVxuICB9XG59KVxuXG5mdW5jdGlvbiBjYXRlc1RvU2lkZWJhckl0ZW0oY2F0ZXM6IENhdGVJdGVtW10pIHtcbiAgcmV0dXJuIGNhdGVzLm1hcChjYXRlID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogY2F0ZS50ZXh0LFxuICAgICAgbGluazogYC8ke2NhdGUubmFtZX1gLFxuICAgICAgaXRlbXM6IGNhdGUuY2hpbGRyZW4gJiYgY2F0ZXNUb1NpZGViYXJJdGVtKGNhdGUuY2hpbGRyZW4pXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWRlYmFyKCkge1xuICBjb25zdCBmaWxlcyA9IGdsb2JTeW5jKFsnLi4vcG9zdHMvKi5tZCddKTtcbiAgY29uc29sZS5sb2coJ2ZpbGVzJywgZmlsZXMpO1xufSIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiSjpcXFxcUHJvamVjdHNcXFxcbXktY3MtYmxvZ1xcXFxkb2NzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJKOlxcXFxQcm9qZWN0c1xcXFxteS1jcy1ibG9nXFxcXGRvY3NcXFxcZGF0YS5tdHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0o6L1Byb2plY3RzL215LWNzLWJsb2cvZG9jcy9kYXRhLm10c1wiO2V4cG9ydCBpbnRlcmZhY2UgQ2F0ZUl0ZW0ge1xyXG4gIHRleHQ6IHN0cmluZyxcclxuICBuYW1lOiBzdHJpbmcsXHJcbiAgY2hpbGRyZW4/OiBDYXRlSXRlbVtdXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBjYXRlczogQ2F0ZUl0ZW1bXSA9IFtcclxuICB7XHJcbiAgICB0ZXh0OiAnXHU1OTI3XHU1MjREXHU3QUVGJyxcclxuICAgIG5hbWU6ICdmcm9udGVuZCcsXHJcbiAgICBjaGlsZHJlbjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogJ0phdmFTY3JpcHQgXHU1QjlFXHU3NTI4XHU2MjgwXHU1REU3JyxcclxuICAgICAgICBuYW1lOiAncHJhdGljYWwtamF2YXNjcmlwdC10aXBzJ1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogJ1ZTQ29kZSBcdTZFOTBcdTc4MDFcdTUyMDZcdTY3OTAnLFxyXG4gICAgICAgIG5hbWU6ICd2c2NvZGUtc291cmNlLWFuYWx5c2lzJ1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogJ1x1NTI0RFx1N0FFRlx1Njc0MFx1ODY2Qlx1OEJCMCcsXHJcbiAgICAgICAgbmFtZTogJ2Zyb250ZW5kLWRlYnVnLWRhaXJ5J1xyXG4gICAgICB9LFxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGV4dDogJ1x1NTkyN1x1NTQwRVx1N0FFRicsXHJcbiAgICBuYW1lOiAnYmFja2VuZCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXh0OiAnXHU0RUJBXHU1REU1XHU2NjdBXHU4MEZEJyxcclxuICAgIG5hbWU6ICdhaScsXHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXh0OiAnXHU4QkExXHU3Qjk3XHU2NzNBXHU3OUQxXHU1QjY2JyxcclxuICAgIG5hbWU6ICdjcydcclxuICB9LFxyXG4gIHtcclxuICAgIHRleHQ6ICdcdTRFQTdcdTU0QzEmXHU4QkJFXHU4QkExJyxcclxuICAgIG5hbWU6ICdwcm9kdWN0LWFuZC1kZXNpZ24nXHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXh0OiAnXHU4QkExXHU3Qjk3XHU2NzNBXHU2MjgwXHU2NzJGJyxcclxuICAgIG5hbWU6ICdjdCdcclxuICB9XHJcbl0iXSwKICAibWFwcGluZ3MiOiAiO0FBQXNTLFNBQTJDLG9CQUFrQzs7O0FDUzVXLElBQU0sUUFBb0I7QUFBQSxFQUMvQjtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sVUFBVTtBQUFBLE1BQ1I7QUFBQSxRQUNFLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsUUFDRSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsTUFDUjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBO0FBQUEsSUFDRSxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsRUFDUjtBQUFBLEVBQ0E7QUFBQSxJQUNFLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxFQUNSO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBO0FBQUEsSUFDRSxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsRUFDUjtBQUNGOzs7QUQ3Q0EsU0FBZSxnQkFBZ0I7QUFFL0IsY0FBYztBQUdkLElBQU8saUJBQVEsYUFBYTtBQUFBLEVBQzFCLE9BQU87QUFBQSxFQUNQLGFBQWE7QUFBQSxFQUNiLGFBQWE7QUFBQTtBQUFBLElBRVgsS0FBSztBQUFBLE1BQ0gsRUFBRSxNQUFNLFFBQVEsTUFBTSxJQUFJO0FBQUEsTUFDMUIsRUFBRSxNQUFNLFlBQVksTUFBTSxxQkFBcUI7QUFBQSxJQUNqRDtBQUFBLElBRUEsU0FBUyxtQkFBbUIsS0FBSztBQUFBLElBRWpDLGFBQWE7QUFBQSxNQUNYLEVBQUUsTUFBTSxVQUFVLE1BQU0scUNBQXFDO0FBQUEsSUFDL0Q7QUFBQSxFQUNGO0FBQ0YsQ0FBQztBQUVELFNBQVMsbUJBQW1CQSxRQUFtQjtBQUM3QyxTQUFPQSxPQUFNLElBQUksVUFBUTtBQUN2QixXQUFPO0FBQUEsTUFDTCxNQUFNLEtBQUs7QUFBQSxNQUNYLE1BQU0sSUFBSSxLQUFLLElBQUk7QUFBQSxNQUNuQixPQUFPLEtBQUssWUFBWSxtQkFBbUIsS0FBSyxRQUFRO0FBQUEsSUFDMUQ7QUFBQSxFQUNGLENBQUM7QUFDSDtBQUVBLFNBQVMsZ0JBQWdCO0FBQ3ZCLFFBQU0sUUFBUSxTQUFTLENBQUMsZUFBZSxDQUFDO0FBQ3hDLFVBQVEsSUFBSSxTQUFTLEtBQUs7QUFDNUI7IiwKICAibmFtZXMiOiBbImNhdGVzIl0KfQo=
